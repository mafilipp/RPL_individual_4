/*
 * Model.h
 *
 *  Created on: Dec 3, 2014
 *      Author: Filippo Martinoni
 *      Note: The model class afford the update prediction of a differential driver, given the odometry signal
 *      	  and using the "sampling from odometry motion model"
 */

#ifndef MAFILIPP_PARTICLE_FILTER_SRC_MODEL_H_
#define MAFILIPP_PARTICLE_FILTER_SRC_MODEL_H_

#include <ros/ros.h>
#include <geometry_msgs/PoseArray.h>
#include <tf/transform_broadcaster.h>
#include <nav_msgs/Odometry.h>

#include <math.h>
#include <random>
#include <iostream>
#include <chrono>

#include "Particle.h"


// Struct used by the model
struct alpha
{
	double alpha1;
	double alpha2;
	double alpha3;
	double alpha4;
};


class Model
{
public:
	Model(Particle * pc, int nOp, alpha alpha);
	virtual ~Model();
	void odomCallback(const nav_msgs::Odometry::ConstPtr& msg);

	// Generate a random variable generated by a gaussian distribution with 0 mean and variance = variance
	double sample(double variance);

	// Simulate a step for the robot motion given the odometry signal
	void modelPrediction();

private:

	// Used for modePrediction
	double x_odom, x_odom_old, y_odom, y_odom_old, theta_odom, theta_odom_old;
	double dRot1, dTrans, dRot2;
	double dRot1_hat, dTrans_hat, dRot2_hat;
	double x, x_old, y, y_old, theta, theta_old;
	double alpha1, alpha2, alpha3, alpha4;

	// Element from "outside"
	Particle * particleCloud;
	int numberOfParticle;
	//
};
#endif /* MAFILIPP_PARTICLE_FILTER_SRC_MODEL_H_ */
